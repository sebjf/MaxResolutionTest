package maxresolutiontest;

import maxvideo.MaxVideoSignalKernel;
import maxvideo.VideoCounter;

import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.Effort;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.OptimizationTechnique;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;

import displaystandards.DisplayStandard;

public class MaxResolutionTestManager extends CustomManager {

	public MaxResolutionTestManager(MaxResolutionTestEngineParameters engineParameters) {
		super(engineParameters);

		DisplayStandard displayStandard = DisplayStandard.make_RiftDK2();
		VideoCounter.displayStandard = displayStandard;

		config.setDefaultStreamClockFrequency(200);

//		displayStandard.enableHalfPatternInput = true;

		KernelBlock videoDataKernel = addKernel(new MaxResolutionTestKernel(makeKernelParameters("MaxResolutionTestKernel")));
		KernelBlock videoSignalKernel = addKernel(new MaxVideoSignalKernel(makeKernelParameters("MaxVideoSignalKernel"), displayStandard));

		videoSignalKernel.getInput("rgb").connect(videoDataKernel.getOutput("rgb"));
	//	videoSignalKernel.getInput("HalfClockEnable").connect(videoDataKernel.getOutput("HalfClockEnable"));

		getVideoStream("videoData", displayStandard.getDisplayClock()).connect(videoSignalKernel.getOutput("displayDataOut"));

		configBuild(engineParameters);
	}

	private void configBuild(MaxResolutionTestEngineParameters params) {
		BuildConfig buildConfig = getBuildConfig();
		buildConfig.setBuildEffort(Effort.HIGH);
		buildConfig.setMPPRCostTableSearchRange(2, 5);
		buildConfig.setMPPRParallelism(4);
		buildConfig.setMPPRRetryNearMissesThreshold(500);
		buildConfig.setOptimizationGoal(OptimizationTechnique.AREA);
	}

	public static void main(String[] args) {
		MaxResolutionTestManager manager = new MaxResolutionTestManager(new MaxResolutionTestEngineParameters(args));
		manager.build();
	}
}
