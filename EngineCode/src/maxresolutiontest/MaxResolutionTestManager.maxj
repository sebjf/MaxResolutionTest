package maxresolutiontest;

import maxvideo.MaxVideoCounterKernel;
import maxvideo.MaxVideoSignalKernel;

import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.ManagerClock;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;

import displaystandards.DisplayStandard;

public class MaxResolutionTestManager extends CustomManager {

	public MaxResolutionTestManager(MaxResolutionTestEngineParameters engineParameters) {
		super(engineParameters);

		DisplayStandard displayStandard = DisplayStandard.make_1280x1024x60();

		config.setDefaultStreamClockFrequency(displayStandard.getDisplayClock());

		displayStandard.enableHalfPatternInput = true;

		KernelBlock videoCounterKernel = addKernel(new MaxVideoCounterKernel(
				makeKernelParameters("MaxVideoCounterKernel"), displayStandard,
				new MaxVideoCounterKernel.CounterOutput("0", true),
				new MaxVideoCounterKernel.CounterOutput("_signal", false)));

		KernelBlock videoDataKernel = addKernel(new MaxResolutionTestKernel(makeKernelParameters("MaxResolutionTestKernel")));
		KernelBlock videoSignalKernel = addKernel(new MaxVideoSignalKernel(makeKernelParameters("MaxVideoSignalKernel"), displayStandard));

		videoDataKernel.getInput("x").connect(videoCounterKernel.getOutput("x0"));
		videoDataKernel.getInput("y").connect(videoCounterKernel.getOutput("y0"));

		videoSignalKernel.getInput("x").connect(videoCounterKernel.getOutput("x_signal"));
		videoSignalKernel.getInput("y").connect(videoCounterKernel.getOutput("y_signal"));

		videoSignalKernel.getInput("rgb").connect(videoDataKernel.getOutput("rgb"));
		videoSignalKernel.getInput("HalfClockEnable").connect(videoDataKernel.getOutput("HalfClockEnable"));

		ManagerClock displayClock = generateStreamClock("displayDataClock", displayStandard.getDisplayClock());
		videoSignalKernel.setClock(displayClock);

		getVideoStream("videoData", displayClock).connect(videoSignalKernel.getOutput("displayDataOut"));

		configBuild(engineParameters);
	}

	private void configBuild(MaxResolutionTestEngineParameters params) {
		BuildConfig buildConfig = getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());
	}

	public static void main(String[] args) {
		MaxResolutionTestManager manager = new MaxResolutionTestManager(new MaxResolutionTestEngineParameters(args));
		manager.build();
	}
}
